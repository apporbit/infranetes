// Code generated by protoc-gen-go.
// source: vmserver.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	vmserver.proto

It has these top-level messages:
	LogsRequest
	LogLine
	File
	UploadResponse
	StartProxyRequest
	StartProxyResponse
	RunCmdRequest
	RunCmdResponse
	SetIPRequest
	SetIPResponse
	GetIPRequest
	GetIPResponse
	SetSandboxConfigRequest
	SetSandboxConfigResponse
	GetSandboxConfigRequest
	GetSandboxConfigResponse
	CopyFileRequest
	CopyFileResponse
	MountFsRequest
	MountFsResponse
	SetHostnameRequest
	SetHostnameResponse
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogsRequest struct {
	ContainerID string `protobuf:"bytes,1,opt,name=containerID" json:"containerID,omitempty"`
}

func (m *LogsRequest) Reset()                    { *m = LogsRequest{} }
func (m *LogsRequest) String() string            { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()               {}
func (*LogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LogLine struct {
	LogLine string `protobuf:"bytes,1,opt,name=logLine" json:"logLine,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type File struct {
	Size int64  `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UploadResponse struct {
}

func (m *UploadResponse) Reset()                    { *m = UploadResponse{} }
func (m *UploadResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()               {}
func (*UploadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StartProxyRequest struct {
	Ip          string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	ClusterCidr string `protobuf:"bytes,2,opt,name=clusterCidr" json:"clusterCidr,omitempty"`
	Kubeconfig  []byte `protobuf:"bytes,3,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
}

func (m *StartProxyRequest) Reset()                    { *m = StartProxyRequest{} }
func (m *StartProxyRequest) String() string            { return proto.CompactTextString(m) }
func (*StartProxyRequest) ProtoMessage()               {}
func (*StartProxyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StartProxyResponse struct {
}

func (m *StartProxyResponse) Reset()                    { *m = StartProxyResponse{} }
func (m *StartProxyResponse) String() string            { return proto.CompactTextString(m) }
func (*StartProxyResponse) ProtoMessage()               {}
func (*StartProxyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RunCmdRequest struct {
	Cmd  string   `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *RunCmdRequest) Reset()                    { *m = RunCmdRequest{} }
func (m *RunCmdRequest) String() string            { return proto.CompactTextString(m) }
func (*RunCmdRequest) ProtoMessage()               {}
func (*RunCmdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RunCmdResponse struct {
}

func (m *RunCmdResponse) Reset()                    { *m = RunCmdResponse{} }
func (m *RunCmdResponse) String() string            { return proto.CompactTextString(m) }
func (*RunCmdResponse) ProtoMessage()               {}
func (*RunCmdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SetIPRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *SetIPRequest) Reset()                    { *m = SetIPRequest{} }
func (m *SetIPRequest) String() string            { return proto.CompactTextString(m) }
func (*SetIPRequest) ProtoMessage()               {}
func (*SetIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SetIPResponse struct {
}

func (m *SetIPResponse) Reset()                    { *m = SetIPResponse{} }
func (m *SetIPResponse) String() string            { return proto.CompactTextString(m) }
func (*SetIPResponse) ProtoMessage()               {}
func (*SetIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type GetIPRequest struct {
}

func (m *GetIPRequest) Reset()                    { *m = GetIPRequest{} }
func (m *GetIPRequest) String() string            { return proto.CompactTextString(m) }
func (*GetIPRequest) ProtoMessage()               {}
func (*GetIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetIPResponse struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *GetIPResponse) Reset()                    { *m = GetIPResponse{} }
func (m *GetIPResponse) String() string            { return proto.CompactTextString(m) }
func (*GetIPResponse) ProtoMessage()               {}
func (*GetIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SetSandboxConfigRequest struct {
	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *SetSandboxConfigRequest) Reset()                    { *m = SetSandboxConfigRequest{} }
func (m *SetSandboxConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*SetSandboxConfigRequest) ProtoMessage()               {}
func (*SetSandboxConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type SetSandboxConfigResponse struct {
}

func (m *SetSandboxConfigResponse) Reset()                    { *m = SetSandboxConfigResponse{} }
func (m *SetSandboxConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*SetSandboxConfigResponse) ProtoMessage()               {}
func (*SetSandboxConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type GetSandboxConfigRequest struct {
}

func (m *GetSandboxConfigRequest) Reset()                    { *m = GetSandboxConfigRequest{} }
func (m *GetSandboxConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSandboxConfigRequest) ProtoMessage()               {}
func (*GetSandboxConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type GetSandboxConfigResponse struct {
	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *GetSandboxConfigResponse) Reset()                    { *m = GetSandboxConfigResponse{} }
func (m *GetSandboxConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSandboxConfigResponse) ProtoMessage()               {}
func (*GetSandboxConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type CopyFileRequest struct {
	File     string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileData []byte `protobuf:"bytes,2,opt,name=fileData,proto3" json:"fileData,omitempty"`
}

func (m *CopyFileRequest) Reset()                    { *m = CopyFileRequest{} }
func (m *CopyFileRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyFileRequest) ProtoMessage()               {}
func (*CopyFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type CopyFileResponse struct {
}

func (m *CopyFileResponse) Reset()                    { *m = CopyFileResponse{} }
func (m *CopyFileResponse) String() string            { return proto.CompactTextString(m) }
func (*CopyFileResponse) ProtoMessage()               {}
func (*CopyFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type MountFsRequest struct {
	Source   string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Target   string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Fstype   string `protobuf:"bytes,3,opt,name=fstype" json:"fstype,omitempty"`
	ReadOnly bool   `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *MountFsRequest) Reset()                    { *m = MountFsRequest{} }
func (m *MountFsRequest) String() string            { return proto.CompactTextString(m) }
func (*MountFsRequest) ProtoMessage()               {}
func (*MountFsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type MountFsResponse struct {
}

func (m *MountFsResponse) Reset()                    { *m = MountFsResponse{} }
func (m *MountFsResponse) String() string            { return proto.CompactTextString(m) }
func (*MountFsResponse) ProtoMessage()               {}
func (*MountFsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type SetHostnameRequest struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *SetHostnameRequest) Reset()                    { *m = SetHostnameRequest{} }
func (m *SetHostnameRequest) String() string            { return proto.CompactTextString(m) }
func (*SetHostnameRequest) ProtoMessage()               {}
func (*SetHostnameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type SetHostnameResponse struct {
}

func (m *SetHostnameResponse) Reset()                    { *m = SetHostnameResponse{} }
func (m *SetHostnameResponse) String() string            { return proto.CompactTextString(m) }
func (*SetHostnameResponse) ProtoMessage()               {}
func (*SetHostnameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func init() {
	proto.RegisterType((*LogsRequest)(nil), "common.LogsRequest")
	proto.RegisterType((*LogLine)(nil), "common.LogLine")
	proto.RegisterType((*File)(nil), "common.File")
	proto.RegisterType((*UploadResponse)(nil), "common.UploadResponse")
	proto.RegisterType((*StartProxyRequest)(nil), "common.StartProxyRequest")
	proto.RegisterType((*StartProxyResponse)(nil), "common.StartProxyResponse")
	proto.RegisterType((*RunCmdRequest)(nil), "common.RunCmdRequest")
	proto.RegisterType((*RunCmdResponse)(nil), "common.RunCmdResponse")
	proto.RegisterType((*SetIPRequest)(nil), "common.SetIPRequest")
	proto.RegisterType((*SetIPResponse)(nil), "common.SetIPResponse")
	proto.RegisterType((*GetIPRequest)(nil), "common.GetIPRequest")
	proto.RegisterType((*GetIPResponse)(nil), "common.GetIPResponse")
	proto.RegisterType((*SetSandboxConfigRequest)(nil), "common.SetSandboxConfigRequest")
	proto.RegisterType((*SetSandboxConfigResponse)(nil), "common.SetSandboxConfigResponse")
	proto.RegisterType((*GetSandboxConfigRequest)(nil), "common.GetSandboxConfigRequest")
	proto.RegisterType((*GetSandboxConfigResponse)(nil), "common.GetSandboxConfigResponse")
	proto.RegisterType((*CopyFileRequest)(nil), "common.CopyFileRequest")
	proto.RegisterType((*CopyFileResponse)(nil), "common.CopyFileResponse")
	proto.RegisterType((*MountFsRequest)(nil), "common.MountFsRequest")
	proto.RegisterType((*MountFsResponse)(nil), "common.MountFsResponse")
	proto.RegisterType((*SetHostnameRequest)(nil), "common.SetHostnameRequest")
	proto.RegisterType((*SetHostnameResponse)(nil), "common.SetHostnameResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for VMServer service

type VMServerClient interface {
	// rpc UploadFiles(File) returns (UploadResponse) {}
	StartProxy(ctx context.Context, in *StartProxyRequest, opts ...grpc.CallOption) (*StartProxyResponse, error)
	RunCmd(ctx context.Context, in *RunCmdRequest, opts ...grpc.CallOption) (*RunCmdResponse, error)
	SetPodIP(ctx context.Context, in *SetIPRequest, opts ...grpc.CallOption) (*SetIPResponse, error)
	GetPodIP(ctx context.Context, in *GetIPRequest, opts ...grpc.CallOption) (*GetIPResponse, error)
	SetSandboxConfig(ctx context.Context, in *SetSandboxConfigRequest, opts ...grpc.CallOption) (*SetSandboxConfigResponse, error)
	GetSandboxConfig(ctx context.Context, in *GetSandboxConfigRequest, opts ...grpc.CallOption) (*GetSandboxConfigResponse, error)
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error)
	MountFs(ctx context.Context, in *MountFsRequest, opts ...grpc.CallOption) (*MountFsResponse, error)
	SetHostname(ctx context.Context, in *SetHostnameRequest, opts ...grpc.CallOption) (*SetHostnameResponse, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (VMServer_LogsClient, error)
}

type vMServerClient struct {
	cc *grpc.ClientConn
}

func NewVMServerClient(cc *grpc.ClientConn) VMServerClient {
	return &vMServerClient{cc}
}

func (c *vMServerClient) StartProxy(ctx context.Context, in *StartProxyRequest, opts ...grpc.CallOption) (*StartProxyResponse, error) {
	out := new(StartProxyResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/StartProxy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) RunCmd(ctx context.Context, in *RunCmdRequest, opts ...grpc.CallOption) (*RunCmdResponse, error) {
	out := new(RunCmdResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/RunCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) SetPodIP(ctx context.Context, in *SetIPRequest, opts ...grpc.CallOption) (*SetIPResponse, error) {
	out := new(SetIPResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/SetPodIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) GetPodIP(ctx context.Context, in *GetIPRequest, opts ...grpc.CallOption) (*GetIPResponse, error) {
	out := new(GetIPResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/GetPodIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) SetSandboxConfig(ctx context.Context, in *SetSandboxConfigRequest, opts ...grpc.CallOption) (*SetSandboxConfigResponse, error) {
	out := new(SetSandboxConfigResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/SetSandboxConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) GetSandboxConfig(ctx context.Context, in *GetSandboxConfigRequest, opts ...grpc.CallOption) (*GetSandboxConfigResponse, error) {
	out := new(GetSandboxConfigResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/GetSandboxConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error) {
	out := new(CopyFileResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/CopyFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) MountFs(ctx context.Context, in *MountFsRequest, opts ...grpc.CallOption) (*MountFsResponse, error) {
	out := new(MountFsResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/MountFs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) SetHostname(ctx context.Context, in *SetHostnameRequest, opts ...grpc.CallOption) (*SetHostnameResponse, error) {
	out := new(SetHostnameResponse)
	err := grpc.Invoke(ctx, "/common.VMServer/SetHostname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServerClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (VMServer_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VMServer_serviceDesc.Streams[0], c.cc, "/common.VMServer/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMServerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMServer_LogsClient interface {
	Recv() (*LogLine, error)
	grpc.ClientStream
}

type vMServerLogsClient struct {
	grpc.ClientStream
}

func (x *vMServerLogsClient) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for VMServer service

type VMServerServer interface {
	// rpc UploadFiles(File) returns (UploadResponse) {}
	StartProxy(context.Context, *StartProxyRequest) (*StartProxyResponse, error)
	RunCmd(context.Context, *RunCmdRequest) (*RunCmdResponse, error)
	SetPodIP(context.Context, *SetIPRequest) (*SetIPResponse, error)
	GetPodIP(context.Context, *GetIPRequest) (*GetIPResponse, error)
	SetSandboxConfig(context.Context, *SetSandboxConfigRequest) (*SetSandboxConfigResponse, error)
	GetSandboxConfig(context.Context, *GetSandboxConfigRequest) (*GetSandboxConfigResponse, error)
	CopyFile(context.Context, *CopyFileRequest) (*CopyFileResponse, error)
	MountFs(context.Context, *MountFsRequest) (*MountFsResponse, error)
	SetHostname(context.Context, *SetHostnameRequest) (*SetHostnameResponse, error)
	Logs(*LogsRequest, VMServer_LogsServer) error
}

func RegisterVMServerServer(s *grpc.Server, srv VMServerServer) {
	s.RegisterService(&_VMServer_serviceDesc, srv)
}

func _VMServer_StartProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).StartProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/StartProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).StartProxy(ctx, req.(*StartProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_RunCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).RunCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/RunCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).RunCmd(ctx, req.(*RunCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_SetPodIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).SetPodIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/SetPodIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).SetPodIP(ctx, req.(*SetIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_GetPodIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).GetPodIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/GetPodIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).GetPodIP(ctx, req.(*GetIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_SetSandboxConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSandboxConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).SetSandboxConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/SetSandboxConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).SetSandboxConfig(ctx, req.(*SetSandboxConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_GetSandboxConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSandboxConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).GetSandboxConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/GetSandboxConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).GetSandboxConfig(ctx, req.(*GetSandboxConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_MountFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountFsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).MountFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/MountFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).MountFs(ctx, req.(*MountFsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_SetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServerServer).SetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.VMServer/SetHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServerServer).SetHostname(ctx, req.(*SetHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMServer_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMServerServer).Logs(m, &vMServerLogsServer{stream})
}

type VMServer_LogsServer interface {
	Send(*LogLine) error
	grpc.ServerStream
}

type vMServerLogsServer struct {
	grpc.ServerStream
}

func (x *vMServerLogsServer) Send(m *LogLine) error {
	return x.ServerStream.SendMsg(m)
}

var _VMServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.VMServer",
	HandlerType: (*VMServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartProxy",
			Handler:    _VMServer_StartProxy_Handler,
		},
		{
			MethodName: "RunCmd",
			Handler:    _VMServer_RunCmd_Handler,
		},
		{
			MethodName: "SetPodIP",
			Handler:    _VMServer_SetPodIP_Handler,
		},
		{
			MethodName: "GetPodIP",
			Handler:    _VMServer_GetPodIP_Handler,
		},
		{
			MethodName: "SetSandboxConfig",
			Handler:    _VMServer_SetSandboxConfig_Handler,
		},
		{
			MethodName: "GetSandboxConfig",
			Handler:    _VMServer_GetSandboxConfig_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _VMServer_CopyFile_Handler,
		},
		{
			MethodName: "MountFs",
			Handler:    _VMServer_MountFs_Handler,
		},
		{
			MethodName: "SetHostname",
			Handler:    _VMServer_SetHostname_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _VMServer_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("vmserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x55, 0x5f, 0x4f, 0xdb, 0x3e,
	0x14, 0xa5, 0xb4, 0xbf, 0xd2, 0xdf, 0x05, 0xda, 0x62, 0xfe, 0x34, 0x78, 0x12, 0x20, 0xef, 0x65,
	0x4f, 0x1d, 0x63, 0xda, 0xc3, 0xa4, 0x49, 0xd3, 0x54, 0x46, 0x40, 0x02, 0xad, 0x4a, 0xb5, 0xed,
	0x39, 0x34, 0x6e, 0x17, 0xad, 0x89, 0xb3, 0xd8, 0x41, 0x74, 0x5f, 0x6a, 0x5f, 0x71, 0x8e, 0xe3,
	0xa4, 0x6e, 0xd2, 0x68, 0x4f, 0xdc, 0x7b, 0xec, 0x73, 0xce, 0xbd, 0xcd, 0x09, 0x81, 0xee, 0x53,
	0xc0, 0x69, 0xfc, 0x44, 0xe3, 0x61, 0x14, 0x33, 0xc1, 0x50, 0x7b, 0xca, 0x82, 0x80, 0x85, 0xe4,
	0x35, 0xec, 0xde, 0xb3, 0x39, 0x77, 0xe8, 0xaf, 0x84, 0x72, 0x81, 0x2e, 0x60, 0x77, 0xca, 0x42,
	0xe1, 0xfa, 0x21, 0x8d, 0xef, 0xae, 0xad, 0xc6, 0x45, 0xe3, 0xd5, 0xff, 0x8e, 0x09, 0x91, 0x97,
	0xb0, 0x23, 0x09, 0xf7, 0xb2, 0x43, 0x16, 0xec, 0x2c, 0xb2, 0x52, 0x5f, 0xcc, 0x5b, 0x32, 0x84,
	0xd6, 0x8d, 0xbf, 0xa0, 0x08, 0x41, 0x8b, 0xfb, 0xbf, 0xb3, 0xe3, 0xa6, 0xa3, 0xea, 0x14, 0xf3,
	0x5c, 0xe1, 0x5a, 0xdb, 0x12, 0xdb, 0x73, 0x54, 0x4d, 0xfa, 0xd0, 0xfd, 0x1a, 0x2d, 0x98, 0xeb,
	0x39, 0x94, 0x47, 0x2c, 0xe4, 0x94, 0x50, 0x38, 0x98, 0x08, 0x37, 0x16, 0xe3, 0x98, 0x3d, 0x2f,
	0xf3, 0xe9, 0xba, 0xb0, 0xed, 0x47, 0xda, 0x4b, 0x56, 0x6a, 0xda, 0x45, 0xc2, 0x05, 0x8d, 0x47,
	0xbe, 0x17, 0x2b, 0xc5, 0x74, 0xda, 0x15, 0x84, 0xce, 0x00, 0x7e, 0x26, 0x8f, 0x54, 0x2e, 0x30,
	0xf3, 0xe7, 0x56, 0x53, 0x59, 0x1a, 0x08, 0x39, 0x02, 0x64, 0xda, 0x68, 0xf3, 0x77, 0xb0, 0xef,
	0x24, 0xe1, 0x28, 0xf0, 0x72, 0xe3, 0x3e, 0x34, 0xa7, 0x81, 0xa7, 0x9d, 0xd3, 0x32, 0xdd, 0xc2,
	0x8d, 0xe7, 0x5c, 0x7a, 0x36, 0x25, 0xa4, 0xea, 0x74, 0x8b, 0x9c, 0xa6, 0x85, 0xce, 0x60, 0x6f,
	0x42, 0xc5, 0xdd, 0xb8, 0x66, 0x01, 0xd2, 0x83, 0x7d, 0x7d, 0xae, 0x09, 0x5d, 0xd8, 0xb3, 0x0d,
	0x02, 0x39, 0x87, 0x7d, 0xdb, 0xbc, 0x50, 0x51, 0x78, 0x03, 0x03, 0xa9, 0x30, 0x71, 0x43, 0xef,
	0x91, 0x3d, 0x8f, 0xd4, 0x52, 0xb9, 0xd9, 0x09, 0xb4, 0xf5, 0xde, 0x0d, 0xb5, 0xb7, 0xee, 0x08,
	0x06, 0xab, 0x4a, 0xd1, 0xfe, 0xa7, 0x30, 0xb0, 0x37, 0xcb, 0x91, 0x2b, 0xb0, 0xec, 0x1a, 0x5a,
	0xad, 0xd5, 0x27, 0xe8, 0x8d, 0x58, 0xb4, 0x4c, 0xb3, 0x90, 0x4f, 0x25, 0x7f, 0xb8, 0x99, 0x6c,
	0xf5, 0x0a, 0xaa, 0x46, 0x18, 0x3a, 0xe9, 0xdf, 0xeb, 0x55, 0x2c, 0x8a, 0x9e, 0x20, 0xe8, 0xaf,
	0x24, 0xf4, 0x94, 0x02, 0xba, 0x0f, 0x2c, 0x09, 0xc5, 0x0d, 0x37, 0x76, 0xe5, 0x2c, 0x89, 0xa7,
	0xb9, 0xae, 0xee, 0x52, 0x5c, 0x3e, 0xde, 0x39, 0x15, 0x3a, 0x1c, 0xba, 0x4b, 0xf1, 0x19, 0x17,
	0xcb, 0x88, 0xaa, 0x4c, 0x48, 0x3c, 0xeb, 0xd2, 0x49, 0x62, 0xea, 0x7a, 0x5f, 0xc2, 0xc5, 0xd2,
	0x6a, 0xc9, 0x93, 0x8e, 0x53, 0xf4, 0xe4, 0x00, 0x7a, 0x85, 0xab, 0x1e, 0xe4, 0x52, 0xc6, 0x87,
	0x8a, 0x5b, 0xc6, 0x45, 0xe8, 0x06, 0xc5, 0x8a, 0x52, 0xe4, 0x87, 0x86, 0xf4, 0x38, 0x45, 0x4f,
	0x8e, 0xe1, 0x70, 0x8d, 0x91, 0x09, 0x5d, 0xfd, 0xf9, 0x0f, 0x3a, 0xdf, 0x1e, 0x26, 0xea, 0x0d,
	0x45, 0x9f, 0x01, 0x56, 0xa1, 0x44, 0xa7, 0xc3, 0xec, 0x55, 0x1d, 0x56, 0xde, 0x07, 0x8c, 0x37,
	0x1d, 0xe9, 0xd1, 0xb6, 0xd0, 0x7b, 0x68, 0x67, 0x71, 0x44, 0xc7, 0xf9, 0xbd, 0xb5, 0x54, 0xe3,
	0x93, 0x32, 0x6c, 0x50, 0x3b, 0x72, 0xca, 0x31, 0xf3, 0xee, 0xc6, 0xe8, 0xa8, 0x30, 0x31, 0x82,
	0x89, 0x8f, 0x4b, 0xa8, 0x49, 0xb5, 0x2b, 0x54, 0x7b, 0x23, 0xd5, 0x2e, 0x51, 0xbf, 0x43, 0xbf,
	0x1c, 0x4c, 0x74, 0x6e, 0xf8, 0x6c, 0x8a, 0x25, 0xbe, 0xa8, 0xbf, 0x60, 0x0a, 0xdb, 0xb5, 0xc2,
	0xf6, 0xbf, 0x84, 0xed, 0x7a, 0xe1, 0x8f, 0xd0, 0xc9, 0xc3, 0x89, 0x06, 0xf9, 0xfd, 0x52, 0xe2,
	0xb1, 0x55, 0x3d, 0x28, 0x04, 0x3e, 0xc0, 0x8e, 0xce, 0x14, 0x2a, 0x9e, 0xc6, 0x7a, 0xb4, 0xf1,
	0xa0, 0x82, 0x17, 0xec, 0x5b, 0xd8, 0x35, 0xc2, 0x84, 0xb0, 0xf1, 0x53, 0x94, 0x32, 0x89, 0x5f,
	0x6c, 0x3c, 0x2b, 0x94, 0x2e, 0xa1, 0x95, 0x7e, 0x06, 0xd0, 0x61, 0x7e, 0xcd, 0xf8, 0x28, 0xe0,
	0x9e, 0x01, 0xaa, 0x7f, 0xef, 0x5b, 0x97, 0x8d, 0xc7, 0xb6, 0xfa, 0x8e, 0xbc, 0xfd, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x71, 0x4f, 0x01, 0x06, 0x59, 0x06, 0x00, 0x00,
}
